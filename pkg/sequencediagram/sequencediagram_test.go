package sequencediagram

import (
	"testing"

	"github.com/joshcarp/sysl-printing/pkg/cmdutils"
	"github.com/joshcarp/sysl-printing/pkg/parse"
	"github.com/joshcarp/sysl-printing/pkg/syslutil"
	"github.com/sirupsen/logrus/hooks/test"
	"github.com/spf13/afero"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestSequenceDiagramFail(t *testing.T) {
	t.Parallel()

	_, err := parse.NewParser().Parse("doesn't-exist.sysl", syslutil.NewChrootFs(afero.NewOsFs(), ""))
	require.Error(t, err)
}

func TestSequenceDiagram(t *testing.T) {
	t.Parallel()

	logger, _ := test.NewNullLogger()
	m, err := parse.NewParser().Parse("demo/simple/sysl-sd.sysl",
		syslutil.NewChrootFs(afero.NewOsFs(), projDir))
	require.NoError(t, err)
	l := &cmdutils.Labeler{}
	p := &SequenceDiagParam{}
	p.Endpoints = []string{"WebFrontend <- RequestProfile"}
	p.AppLabeler = l
	p.EndpointLabeler = l
	p.Title = "Profile"
	r, err := GenerateSequenceDiag(m, p, logger)

	expected := `''''''''''''''''''''''''''''''''''''''''''
''                                      ''
''  AUTOGENERATED CODE -- DO NOT EDIT!  ''
''                                      ''
''''''''''''''''''''''''''''''''''''''''''

@startuml
control "WebFrontend" as _0
control "Api" as _1
database "Database" as _2
skinparam maxMessageSize 250
title Profile
== WebFrontend <- RequestProfile ==
[->_0 : RequestProfile
activate _0
 _0->_1 : GET /users/{user_id}/profile
 activate _1
  _1->_2 : QueryUser
  activate _2
  _1<--_2 : User
  deactivate _2
 _0<--_1 : UserProfile
 deactivate _1
[<--_0 : Profile Page
deactivate _0
@enduml
`

	assert.NotNil(t, m)
	assert.NotNil(t, r)
	assert.Nil(t, err)
	assert.Equal(t, expected, r)
}

func TestSequenceDiagram2(t *testing.T) {
	t.Parallel()

	logger, _ := test.NewNullLogger()
	m, err := parse.NewParser().Parse("demo/simple/sysl-sd2.sysl",
		syslutil.NewChrootFs(afero.NewOsFs(), projDir))
	require.NoError(t, err)
	l := &cmdutils.Labeler{}
	p := &SequenceDiagParam{}
	p.Endpoints = []string{"WebFrontend <- RequestProfile"}
	p.AppLabeler = l
	p.EndpointLabeler = l
	p.Title = "Profile"
	r, err := GenerateSequenceDiag(m, p, logger)

	expected := `''''''''''''''''''''''''''''''''''''''''''
''                                      ''
''  AUTOGENERATED CODE -- DO NOT EDIT!  ''
''                                      ''
''''''''''''''''''''''''''''''''''''''''''

@startuml
control "WebFrontend" as _0
control "Api" as _1
database "Database" as _2
skinparam maxMessageSize 250
title Profile
== WebFrontend <- RequestProfile ==
[->_0 : RequestProfile
activate _0
 _0->_1 : GET /users/{user_id}/profile
 activate _1
  _1->_2 : QueryUser
  activate _2
  _1<--_2 : User [~y |  x="1"]
  deactivate _2
 _0<--_1 : UserProfile
 deactivate _1
 _0->_0 : FooBar
[<--_0 : Profile Page
deactivate _0
@enduml
`

	assert.NotNil(t, m)
	assert.NotNil(t, r)
	assert.Nil(t, err)
	assert.Equal(t, expected, r)
}

func TestSequenceDiagramToFormatNameAttributes(t *testing.T) {
	t.Parallel()

	logger, _ := test.NewNullLogger()
	memFs, fs := syslutil.WriteToMemOverlayFs(testDir)
	m, err := parse.NewParser().Parse("sequence_diagram_name_format.sysl", fs)
	require.NoError(t, err)
	syslutil.AssertFsHasExactly(t, memFs)
	al := cmdutils.MakeFormatParser(`%(@status?<color red>%(appname)</color>|%(appname))`)
	el := cmdutils.MakeFormatParser(`%(@status? <color green>%(epname)</color>|%(epname))`)
	p := &SequenceDiagParam{}
	p.Endpoints = []string{"User <- Check Balance"}
	p.AppLabeler = al
	p.EndpointLabeler = el
	r, err := GenerateSequenceDiag(m, p, logger)
	p.Title = "Diagram"
	expected := `''''''''''''''''''''''''''''''''''''''''''
''                                      ''
''  AUTOGENERATED CODE -- DO NOT EDIT!  ''
''                                      ''
''''''''''''''''''''''''''''''''''''''''''

@startuml
actor "User" as _0
boundary "MobileApp" as _1
control "<color red>Server</color>" as _2
database "DB" as _3
skinparam maxMessageSize 250
== User <- Check Balance ==
 _0->_1 : Login
 activate _1
  _1->_2 : Login
  activate _2
  _2 -> _2 : do input validation
   _2->_3 :  <color green>Save</color>
  _1<--_2 : success or failure
  deactivate _2
 deactivate _1
 _0->_1 : Check Balance
 activate _1
  _1->_2 : Read User Balance
  activate _2
   _2->_3 :  <color green>Load</color>
  _1<--_2 : balance
  deactivate _2
 deactivate _1
@enduml
`

	assert.NotNil(t, m)
	assert.NotNil(t, r)
	assert.Nil(t, err)
	assert.Equal(t, expected, r)
}

func TestSequenceDiagramramsToFormatComplexAttributes(t *testing.T) {
	t.Parallel()

	logger, _ := test.NewNullLogger()
	memFs, fs := syslutil.WriteToMemOverlayFs(testDir)
	m, err := parse.NewParser().Parse("sequence_diagram_name_format.sysl", fs)
	require.NoError(t, err)
	syslutil.AssertFsHasExactly(t, memFs)
	al := cmdutils.MakeFormatParser(`%(@status?<color red>%(appname)</color>|%(appname))`)
	el := cmdutils.MakeFormatParser(`%(@status? <color green>%(epname)</color>|%(epname))`)
	p := &SequenceDiagParam{}
	p.Endpoints = []string{"User <- Check Balance"}
	p.AppLabeler = al
	p.EndpointLabeler = el
	r, err := GenerateSequenceDiag(m, p, logger)
	p.Title = "Diagram"
	expected := `''''''''''''''''''''''''''''''''''''''''''
''                                      ''
''  AUTOGENERATED CODE -- DO NOT EDIT!  ''
''                                      ''
''''''''''''''''''''''''''''''''''''''''''

@startuml
actor "User" as _0
boundary "MobileApp" as _1
control "<color red>Server</color>" as _2
database "DB" as _3
skinparam maxMessageSize 250
== User <- Check Balance ==
 _0->_1 : Login
 activate _1
  _1->_2 : Login
  activate _2
  _2 -> _2 : do input validation
   _2->_3 :  <color green>Save</color>
  _1<--_2 : success or failure
  deactivate _2
 deactivate _1
 _0->_1 : Check Balance
 activate _1
  _1->_2 : Read User Balance
  activate _2
   _2->_3 :  <color green>Load</color>
  _1<--_2 : balance
  deactivate _2
 deactivate _1
@enduml
`

	assert.NotNil(t, m)
	assert.NotNil(t, r)
	assert.Nil(t, err)
	assert.Equal(t, expected, r)
}
