package main

import (
	"io/ioutil"
	"path/filepath"
	"testing"

	"github.com/joshcarp/sysl-printing/pkg/cmdutils"

	"github.com/sirupsen/logrus/hooks/test"

	"github.com/joshcarp/sysl-printing/pkg/parse"
	sysl "github.com/joshcarp/sysl-printing/pkg/sysl"
	"github.com/joshcarp/sysl-printing/pkg/syslutil"
	"github.com/spf13/afero"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"gopkg.in/alecthomas/kingpin.v2"
)

const plantumlHeader = `''''''''''''''''''''''''''''''''''''''''''
''                                      ''
''  AUTOGENERATED CODE -- DO NOT EDIT!  ''
''                                      ''
''''''''''''''''''''''''''''''''''''''''''

@startuml
hide stereotype
scale max 16384 height
skinparam component {
  BackgroundColor FloralWhite
  BorderColor Black
  ArrowColor Crimson
}`

func TestGenerateIntegrations(t *testing.T) {
	t.Parallel()

	m, err := parse.NewParser().Parse("demo/simple/sysl-ints.sysl",
		syslutil.NewChrootFs(afero.NewOsFs(), projDir))
	require.NoError(t, err)
	require.NotNil(t, m)

	stmt := &sysl.Statement{}
	args := &Args{"", "Project", false, false}
	apps := []string{"System1", "IntegratedSystem", "System2"}
	highlights := syslutil.MakeStrSet("IntegratedSystem", "System1", "System2")
	s1 := AppElement{"IntegratedSystem", "integrated_endpoint_1"}
	t1 := AppElement{"System1", "endpoint"}
	dep1 := AppDependency{
		Self:      s1,
		Target:    t1,
		Statement: stmt,
	}
	deps := []AppDependency{
		dep1,
	}
	endpt := &sysl.Endpoint{
		Name: "_",
		Stmt: []*sysl.Statement{
			{Stmt: &sysl.Statement_Action{Action: &sysl.Action{Action: "IntegratedSystem"}}},
			{Stmt: &sysl.Statement_Action{Action: &sysl.Action{Action: "System1"}}},
		},
	}
	intsParam := &IntsParam{apps, highlights, deps, m.GetApps()["Project"], endpt}
	r := GenerateView(args, intsParam, m)

	require.NotNil(t, r)

	expected := plantumlHeader + `
[IntegratedSystem] as _0 <<highlight>>
[System1] as _1 <<highlight>>
_0 --> _1
@enduml`

	assert.Equal(t, expected, r)
}

type intsArg struct {
	rootModel string
	title     string
	output    string
	project   string
	filter    string
	modules   string
	exclude   []string
	clustered bool
	epa       bool
}

func comparePUML(t *testing.T, expected, actual map[string]string) {
	for name, goldenFile := range expected {
		golden, err := ioutil.ReadFile(goldenFile)
		assert.Nil(t, err)
		if string(golden) != actual[name] {
			err := ioutil.WriteFile(filepath.Join(testDir, name+".puml"), []byte(actual[name]), 0777)
			assert.Nil(t, err)
		}
		golden = syslutil.HandleCRLF(golden)
		assert.Equal(t, string(golden), actual[name])
	}

	// Then
	assert.Equal(t, len(expected), len(actual))
}

func TestGenerateIntegrationsWithTestFile(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "indirect_1.sysl",
		output:    "%(epname).png",
		project:   "Project",
	}

	expected := map[string]string{
		"all.png":            filepath.Join(testDir, "indirect_1-all-golden.puml"),
		"indirect_arrow.png": filepath.Join(testDir, "indirect_1-indirect_arrow-golden.puml"),
		"my_callers.png":     filepath.Join(testDir, "indirect_1-my_callers-golden.puml"),
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	// Then
	comparePUML(t, expected, result)
}

func TestGenerateIntegrationsWithTestFileAndFilters(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "integration_test.sysl",
		output:    "%(epname).png",
		project:   "Project",
		filter:    "test",
	}
	expected := map[string]string{}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	// Then
	assert.Equal(t, expected, result)
}

func TestGenerateIntegrationsWithImmediatePredecessors(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "integration_immediate_predecessors_test.sysl",
		output:    "%(epname).png",
		project:   "Project",
	}
	expected := map[string]string{
		"immediate_predecessors.png": filepath.Join(testDir, "immediate_predecessors-golden.puml"),
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	// Then
	comparePUML(t, expected, result)
}

func TestGenerateIntegrationsWithExclude(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "integration_excludes_test.sysl",
		output:    "%(epname).png",
		project:   "Project",
	}

	expected := map[string]string{
		"excludes.png": filepath.Join(testDir, "excludes-golden.puml"),
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	// Then
	comparePUML(t, expected, result)
}

func TestGenerateIntegrationsWithPassthrough(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "integration_passthrough_test.sysl",
		output:    "%(epname).png",
		project:   "Project",
	}

	expected := map[string]string{
		"passthrough.png": filepath.Join(testDir, "passthrough-golden.puml"),
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	// Then
	comparePUML(t, expected, result)
}

func TestDoGenerateIntegrations(t *testing.T) {
	t.Parallel()

	args := &intsArg{
		modules: "indirect_1.sysl",
		output:  "%(epname).png",
		project: "Project",
	}
	argsData := []string{"sysl", "ints", "-o", args.output, "-j", args.project, args.modules}
	sysl := kingpin.New("sysl", "System Modelling Language Toolkit")

	r := cmdRunner{}
	assert.NoError(t, r.Configure(sysl))
	selectedCommand, err := sysl.Parse(argsData[1:])
	assert.Nil(t, err, "Cmd line parse failed for sysl ints")
	assert.Equal(t, selectedCommand, "integrations")
}

func TestGenerateIntegrationsWithCluster(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "integration_with_cluster.sysl",
		output:    "%(epname).png",
		project:   "Project",
		clustered: true,
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	expected := map[string]string{
		"cluster.png": filepath.Join(testDir, "cluster-golden.puml"),
	}

	// Then
	comparePUML(t, expected, result)
}

func TestGenerateIntegrationsWithEpa(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "integration_with_epa.sysl",
		output:    "%(epname).png",
		project:   "Project",
		epa:       true,
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	expected := map[string]string{
		"epa.png": filepath.Join(testDir, "epa-golden.puml"),
	}

	// Then
	comparePUML(t, expected, result)
}

func TestGenerateIntegrationsWithIndirectArrow(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "indirect_2.sysl",
		output:    "%(epname).png",
		project:   "Project",
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	expected := map[string]string{
		"all_indirect_2.png":  filepath.Join(testDir, "all_indirect_2-golden.puml"),
		"no_passthrough.png":  filepath.Join(testDir, "no_passthrough-golden.puml"),
		"passthrough_b.png":   filepath.Join(testDir, "passthrough_b-golden.puml"),
		"passthrough_c.png":   filepath.Join(testDir, "passthrough_c-golden.puml"),
		"passthrough_d.png":   filepath.Join(testDir, "passthrough_d-golden.puml"),
		"passthrough_c_e.png": filepath.Join(testDir, "passthrough_c_e-golden.puml"),
	}

	// Then
	comparePUML(t, expected, result)
}

func TestGenerateIntegrationsWithRestrictBy(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "integration_with_restrict_by.sysl",
		output:    "%(epname).png",
		project:   "Project",
		epa:       true,
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	expected := map[string]string{
		"with_restrict_by.png":    filepath.Join(testDir, "with_restrict_by-golden.puml"),
		"without_restrict_by.png": filepath.Join(testDir, "without_restrict_by-golden.puml"),
	}

	// Then
	comparePUML(t, expected, result)
}

func TestGenerateIntegrationsWithFilter(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "integration_with_filter.sysl",
		output:    "%(epname).png",
		project:   "Project",
		filter:    "matched",
	}

	expected := map[string]string{
		"matched.png": filepath.Join(testDir, "matched-golden.puml"),
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	// Then
	comparePUML(t, expected, result)
}

func TestGenerateIntegrationWithOrWithoutPassThrough(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "integration_with_or_without_passthrough.sysl",
		output:    "%(epname).png",
		project:   "Project",
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	expected := map[string]string{
		"with_passthrough.png":    filepath.Join(testDir, "with_passthrough-golden.puml"),
		"without_passthrough.png": filepath.Join(testDir, "without_passthrough-golden.puml"),
		"with_systema.png":        filepath.Join(testDir, "with_systema-golden.puml"),
	}

	// Then
	comparePUML(t, expected, result)
}

func TestPassthrough2(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "passthrough_1.sysl",
		output:    "%(epname).png",
		project:   "Project",
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	expected := map[string]string{
		"pass_1_all.png":   filepath.Join(testDir, "pass_1_all-golden.puml"),
		"pass_1_sys_a.png": filepath.Join(testDir, "pass_1_sys_a-golden.puml"),
		"pass_b.png":       filepath.Join(testDir, "pass_b-golden.puml"),
		"pass_b_c.png":     filepath.Join(testDir, "pass_b_c-golden.puml"),
		"pass_f.png":       filepath.Join(testDir, "pass_f-golden.puml"),
		"pass_D.png":       filepath.Join(testDir, "pass_D-golden.puml"),
		"pass_e.png":       filepath.Join(testDir, "pass_e-golden.puml"),
	}

	// Then
	comparePUML(t, expected, result)
}

func TestGenerateIntegrationsWithPubSub(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "integration_with_pubsub.sysl",
		output:    "%(epname).png",
		project:   "Project",
		epa:       true,
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	expected := map[string]string{
		"pubsub.png": filepath.Join(testDir, "pubsub-golden.puml"),
	}

	// Then
	comparePUML(t, expected, result)
}

func TestAllStmts(t *testing.T) {
	t.Parallel()

	// Given
	args := &intsArg{
		rootModel: testDir,
		modules:   "ints_stmts.sysl",
		output:    "%(epname).png",
		project:   "Project",
	}

	// When
	result, err := GenerateIntegrationsWithParams(args.rootModel, args.title, args.output,
		args.project, args.filter, args.modules, args.exclude, args.clustered,
		args.epa)
	require.NoError(t, err)

	expected := map[string]string{
		"all_stmts.png": filepath.Join(testDir, "all_stmts-golden.puml"),
	}

	// Then
	comparePUML(t, expected, result)
}

func GenerateIntegrationsWithParams(
	rootModel, title, output, project, filter, modules string,
	exclude []string,
	clustered, epa bool,
) (map[string]string, error) {
	cmdContextParamIntgen := &cmdutils.CmdContextParamIntgen{
		Title:     title,
		Output:    output,
		Project:   project,
		Filter:    filter,
		Exclude:   exclude,
		Clustered: clustered,
		EPA:       epa,
	}

	logger, _ := test.NewNullLogger()
	mod, _, err := LoadSyslModule(rootModel, modules, afero.NewOsFs(), logger)
	if err != nil {
		return nil, err
	}
	return GenerateIntegrations(cmdContextParamIntgen, mod, logger)
}
